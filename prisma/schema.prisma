// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = "postgres://postgres:postgres@localhost:5432/postgres"
}

model Example {
    id String @id @default(cuid())
}

enum Role {
    ADMIN
    USER
    VENDOR
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    roles         Role[] @default([USER])
    preferences   UserPreference?
    Products      Product[] @relation("MyProducts")
    @@index([email])
}

model UserPreference {
    id String @id @default(cuid())
    userId String @unique
    user User @relation(fields: [userId], references: [id])
    key String
    value String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id String @id @default(cuid())
    title String
    price Int
    description String
    image String
    averageRating Float
    userId String
    user User @relation("MyProducts", fields: [userId], references: [id], onDelete: Cascade)
    categories Category[]
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Category {
    id Int @id @default(autoincrement())
    name String
    parentId Int?
    parentCategory  Category?  @relation("subCategories", fields: [parentId], references: [id])
    subCategories Category[] @relation(name: "subCategories")
    products Product[]
    @@map("category")
}

